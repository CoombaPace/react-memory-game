{"version":3,"sources":["components/Wrapper/index.js","components/CharCard/CharCard.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","withStyles","card","width","maxWidth","paddingLeft","paddingRight","paddingTop","paddingBottom","media","height","classes","Card","onClick","setClicked","id","CardMedia","image","alt","name","topScore","guessesCorrect","message","App","state","meChars","_this","cardClicked","filter","meChar","clicked","i","length","setState","console","log","sort","b","Math","random","_this2","this","components_Wrapper","map","CharCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8gCAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,0CCmC1BC,kBA7BA,CACbC,KAAM,CACJC,MAAO,IACPC,SAAU,IACVC,YAAa,GACbC,aAAa,GACbC,WAAW,GACXC,cAAe,IAEjBC,MAAO,CACLC,OAAQ,MAmBGT,CAff,SAAmBN,GAAO,IACjBgB,EAAWhB,EAAXgB,QAEP,OACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMb,UAAWY,EAAQT,KACzBW,QAAS,kBAAMlB,EAAMmB,WAAWnB,EAAMoB,MAElCnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACEjB,UAAWY,EAAQF,MACnBQ,MAAOtB,EAAMsB,MAAOC,IAAKvB,EAAMwB,UC3BrCC,EAAW,EACXC,EAAiB,EAEjBC,EAAU,GA2ECC,6MAvEbC,MAAQ,CACRC,UACAL,WACAC,iBACEC,aAGHR,WAAa,SAAAC,GACZ,IAAMU,EAAUC,EAAKF,MAAMC,QACnBE,EAAcF,EAAQG,OAAO,SAAAC,GAAM,OAAIA,EAAOd,KAAOA,IAE7D,GAAIY,EAAY,GAAGG,QAAS,CAE3BT,EAAiB,EACjBC,EAAU,qBAEV,IAAK,IAAIS,EAAI,EAAGA,EAAIN,EAAQO,OAAQD,IACnCN,EAAQM,GAAGD,SAAU,EAGnBJ,EAAKO,SAAS,CAACX,YACfY,QAAQC,IAAIb,GACfI,EAAKO,SAAS,CAACZ,eAAeA,IAC9BK,EAAKO,SAAS,CAACR,iBAGfE,EAAY,GAAGG,SAAU,EAGzBR,EAAU,aADVD,GAAkC,GAGbD,IACpBA,EAAWC,EAGXK,EAAKO,SAAS,CAACb,cAIhBK,EAAQW,KAAK,SAACvC,EAAGwC,GAChB,MAAO,GAAMC,KAAKC,WAGnBb,EAAKO,SAAS,CAACR,YACZC,EAAKO,SAAS,CAACZ,mBACfa,QAAQC,IAAIT,EAAKF,MAAMH,gBAC1BK,EAAKO,SAAS,CAACX,YAEdY,QAAQC,IAAIR,4EAKL,IAAAa,EAAAC,KACP,OACE7C,EAAAC,EAAAC,cAAC4C,EAAD,KACGD,KAAKjB,MAAMC,QAAQkB,IAAI,SAAAd,GAAM,OAC5BjC,EAAAC,EAAAC,cAAC8C,EAAD,CACE9B,WAAY0B,EAAK1B,WACjBC,GAAIc,EAAOd,GACX8B,IAAKhB,EAAOd,GACZE,MAAOY,EAAOZ,MACdE,KAAMU,EAAOV,iBA/DP2B,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c6f383cf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\n// import CardActionArea from '@material-ui/core/CardActionArea';\n// import CardActions from '@material-ui/core/CardActions';\n// import CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\n// import Button from '@material-ui/core/Button';\n// import Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  card: {\n    width: 190,\n    maxWidth: 345,\n    paddingLeft: 10,\n    paddingRight:15,\n    paddingTop:15,\n    paddingBottom: 10,\n  },\n  media: {\n    height: 240,\n  },\n};\n\nfunction MediaCard(props) {\n  const {classes} = props;\n\n  return (\n    <Card className={classes.card}\n    onClick={() => props.setClicked(props.id)}\n    >\n        <CardMedia\n          className={classes.media}\n          image={props.image} alt={props.name}\n        />\n    </Card>\n  );\n}\n\nexport default withStyles(styles)(MediaCard)","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\";\nimport meChars from \"./meChars.json\";\nimport CharCard from \"./components/CharCard/CharCard.js\";\n\nlet topScore = 0;\nlet guessesCorrect = 0;\n// let hearts = 0;\nlet message = \"\";\n\n//sets state for our components\nclass App extends Component {\n  state = {\n\t\tmeChars,\n\t\ttopScore,\n\t\tguessesCorrect,\n    message,\n\t};\n\n\tsetClicked = id => {\n\t\tconst meChars = this.state.meChars;\n    const cardClicked = meChars.filter(meChar => meChar.id === id);\n\n\t\tif (cardClicked[0].clicked) {\n\n\t\t\tguessesCorrect = 0;\n\t\t\tmessage = 'Whoops. Start over';\n\n\t\t\tfor (let i = 0; i < meChars.length; i++) {\n\t\t\t\tmeChars[i].clicked = false;\n\t\t\t}\n\n      this.setState({message});\n      console.log(message);\n\t\t\tthis.setState({guessesCorrect:guessesCorrect});\n\t\t\tthis.setState({meChars});\n\n    } else {\n\t\t\tcardClicked[0].clicked = true;\n\n\t\t\tguessesCorrect = guessesCorrect + 1;\n\t\t\tmessage = \"Good Job!\"\n\n\t\t\tif (guessesCorrect > topScore) {\n\t\t\t\ttopScore = guessesCorrect;\n\t\t\t\t// hearts++;\n\t\t\t\t// this.setState({hearts});\n\t\t\t\tthis.setState({topScore});\n\t\t\t\t// this.renderHearts();\n\t\t\t}\n\n\t\t\tmeChars.sort((a, b) => {\n\t\t\t\treturn 0.5 - Math.random();\n\t\t\t});\n\n\t\t\tthis.setState({meChars});\n      this.setState({guessesCorrect});\n      console.log(this.state.guessesCorrect)\n\t\t\tthis.setState({message});\n    }\n    console.log(cardClicked);\n\n\t};\n\n  // Map over this.state.meChars and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        {this.state.meChars.map(meChar => (\n          <CharCard\n            setClicked={this.setClicked}\n            id={meChar.id}\n            key={meChar.id}\n            image={meChar.image}\n            name={meChar.name}\n            \n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}